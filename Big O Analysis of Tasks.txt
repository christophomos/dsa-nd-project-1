Task 0 has an order of O(1): Accessing elements in an array is a constant time operation, and here it happens twice, no matter the size of the inputs, so:
O(2) approximates to O(1)


Task 1 has an order of O(n). For each dataset, the outermost for loop runs exactly twice and the middle loop runs exactly twice, while the innermost loop iterates through every element in each list. At the end, the size of the resulting set is checked, which is a constant time operation.
Thus O(2*2*n+1) -> O(4n + 1) which approximates to O(n)


Task 2 also has a complexity of O(n). For every row of the “calls” dataset, the first outer for loop runs once and the inner loop runs exactly twice, once for the caller and once for the receiver. After those loops are completed, the final for loop runs 2n times in the worst case (if all of numbers contained in the database are unique.
Thus O(1*n*2 + 2n) -> O(2n + 2n) -> O(4n) approximates to O(n)


Task 3 approximates to O(n * log n) with respect to input size. The first for loop of my algorithm iterates through the entire data set, in which it collects all needed data with the help of two fixed time helper functions, so it approximates to O(n).
The second for loop of Task 3 sorts a set of area codes, an operation with an order of O(n*log n). We would see this worst case scenario if the number of unique area codes in the dataset is high.
So O(n) + O(n* log n) approximates to O(n * log n)


Task 4 approximates to O(n*log n) because of the alphabetical sorting of suspected telemarketers at the end.
The two outer for loops that collect information iterate through a list exactly once, and the inner for loops iterate exactly twice so their complexity is:
O(n*2 + n*2) -> O(4n) which approximates to O(n)
The alphabetical sorting of suspected numbers is an O(n * log n) operation. In the worst case scenario, every row in the call database would have a unique, suspicious number.